name: GitHub Actions
on:
  push:
    branches:
      - "main"
jobs:
  deploy-ec2:
    runs-on: ubuntu-22.04
    env:
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup
        run: |
          cat <<EOT > aws-credentials.env
          AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
          EOT

          mkdir ~/.aws
          cat <<EOT > ~/.aws/credentials
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          EOT

          mkdir ~/.ssh
          echo "$HUMMINGBIRD_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          HUMMINGBIRD_SSH_PRIVATE_KEY: ${{ secrets.HUMMINGBIRD_SSH_PRIVATE_KEY }}
      - name: Generate application.properties
        run: |
          cat <<EOT > src/main/resources/application.properties
          spring.jpa.hibernate.ddl-auto=update
          spring.datasource.url=$SPRING_DATASOURCE_URL
          spring.datasource.username=$SPRING_DATASOURCE_USERNAME
          spring.datasource.password=$SPRING_DATASOURCE_PASSWORD
          spring.datasource.driver-class-name =com.mysql.jdbc.Driver
          EOT
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      - name: Gradle Build
        run: |
          chmod +x build.sh
          ./build.sh
      - name: Attach Security Group
        run: |
          GLOBAL_IP="$(curl inet-ip.info)"
          echo $GLOBAL_IP
          aws ec2 authorize-security-group-ingress --group-name ec2-hummingbird-ci --protocol tcp --port 22 --cidr $GLOBAL_IP/32
      - name: Deploy to EC2
        run: |
          chmod +x deploy.sh
          ./deploy.sh
        env:
          SSH_HUMMINGBIRD: ${{ secrets.SSH_HUMMINGBIRD }}
      - name: Detach Security Group
        run: |
          GLOBAL_IP="$(curl inet-ip.info)"
          echo $GLOBAL_IP
          aws ec2 revoke-security-group-ingress --group-name ec2-hummingbird-ci --protocol tcp --port 22 --cidr $GLOBAL_IP/32
